let nat: type 0
  = ind (type 0) {
    0 : self;
    succ : self -> self;
  };

let double : nat -> nat
  = \x, rec double => match x {
    0 => nat#0;
    succ s => nat#succ (nat#succ (double s));
  };

let isEven : nat -> type 0
  = ind (nat -> type 0) {
    even0 : self nat#0;
    evenSS : (n: nat) -> self n -> self (nat#succ (nat#succ n));
  };

!pass