let nat : type 0
  = ind {
    0 : self;
    S: self -> self;
  };

let plus : nat -> nat -> nat
  = \a, rec r => \b => match a {
    0 / _ => b,
    S x / _ => r x (S b)
  };

let vector
  = \(T: Type) =>
    def (nat -> type) {
      nil : self 0;
      con : (pl: nat) -> T -> self pl -> self (succ pl);
    };